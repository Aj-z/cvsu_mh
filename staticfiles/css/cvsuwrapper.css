* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root{
    --index: calc(1vw + 1vh);
    --transition: cubic-bezier(.1, .7, 0, 1);
}

body{
    background-color: white;
}

.wrapper{
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    flex-direction: column;
}
h1{
    bottom:35px;
    position:relative;
    color:rgb(11, 105, 53);
}

.items, .items1 {
    display: flex;
    gap: 0.3rem;
    perspective: calc(var(--index) * 35);
}

.item, .item1 {
    border-radius: 10px;
        width: calc(var(--index) * 3);
        height: calc(var(--index) * 12);
    background-color: white;
    background-size: cover;
    background-position: center;
    cursor: pointer;
    transition: transform 1.25s var(--transition), filter 3s var(--transition), width 1.25s var(--transition);
}

.item::before, .item::after, .item1::before, .item1::after{
    content: '';
    position: absolute;
    height: 100%;
    width: 50   px;
    right: calc(var(--index) * -1);
}

.item::after .item1::after{
    left: calc(var(--index) * -1);
}

.items .item:hover{
    filter: inherit;
    transform: translateZ(calc(var(--index) * 10));
}
.items1 .item1:hover{
    filter: inherit;
    transform: translateZ(calc(var(--index) * .5));
    
}

/*Right*/

.items .item:hover + *{
    filter: inherit;
    transform: translateZ(calc(var(--index) * 8.5)) rotateY(35deg);
    z-index: -1;
}

.items .item:hover + * + *{
    filter: inherit;
    transform: translateZ(calc(var(--index) * 5.6)) rotateY(40deg);
    z-index: -2;
}

.items .item:hover + * + * + *{
    filter: inherit;
    transform: translateZ(calc(var(--index) * 2.5)) rotateY(30deg);
    z-index: -3;
}

.items .item:hover + * + * + * + *{
    filter: inherit;
    transform: translateZ(calc(var(--index) * .6)) rotateY(15deg);
    z-index: -4;
}


/*Left*/

.items .item:has( + :hover){
    filter: inherit;
    transform: translateZ(calc(var(--index) * 8.5)) rotateY(-35deg);
}

.items .item:has( + * + :hover){
    filter: inherit;
    transform: translateZ(calc(var(--index) * 5.6)) rotateY(-40deg);
}

.items .item:has( + * + * + :hover){
    filter: inherit;
    transform: translateZ(calc(var(--index) * 2.5)) rotateY(-30deg);
}

.items .item:has( + * + * + * + :hover){
    filter: inherit;
    transform: translateZ(calc(var(--index) * .6)) rotateY(-15deg);
}

.items .item:active, .items .item:focus {
	width: 28vw;
	filter: inherit;
	z-index: 100;
	transform: translateZ(calc(var(--index) * 10));
    margin: 0 .45vw;
}
p{
    color: #ffffff;
    display: grid;
    place-items: center;
    transform: translateY(60%);
    background-color: rgb(255 255 255 / 11%);
    -webkit-backdrop-filter: blur(4px);
    backdrop-filter: blur(0.8px);
    --minFontSize:  5px;
    --maxFontSize:  16px;
    --scaler: 1vw;
    font-size: clamp( var(--minFontSize), var(--scaler), var(--maxFontSize) );
}

/*
vars
*/
:root {
    --carousel-transition-duration: 250ms;
    --carousel-transition-ease: ease-out;
    --carousel-bg-color-rgb: 255, 255, 255;
    --carousel-shadow-color-rgb: 128, 128, 128;
    --carousel-item-width: 11.5rem;
    --carousel-item-height: 17.5rem;
    --carousel-item-hover-effect: 1.075;
    --carousel-item-reflection-blur: 0.25rem;
    --carousel-item-empty-color-rgb: 255, 255, 255;
    --carousel-item-glow-color-rgb: 255, 255, 255;
    --carousel-item-glow-size: 5rem;
    --carousel-diameter: 50rem;
    --carousel-3d-perspective: 1000px;
    --carousel-3d-perspective-origin: 50% 20%;
    --carousel-control-button-width: 1.25rem;
    --carousel-control-button-height: 4rem;
    --carousel-control-color-rgb: 50, 150, 50;
    --carousel-animation-duration: 25s;
    --carousel-animation-play-state: running;
    --carousel-direction-animation-play-state: paused;
}

/*
global
*/
*, *::before, *::after {
    margin: 0;
    padding: 0;
    border: 0;
    box-sizing: border-box;
}

*:focus {
    outline: none;
}

a {
    -webkit-tap-highlight-color: rgba(42, 168, 99, 0);
    -webkit-tap-highlight-color: transparent;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

body {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: rgb(var(--carousel-bg-color-rgb));
    overflow: hidden;
}

/*
carousel
*/

/* added own detail carousel */
li.carousel-item.item:active,li.carousel-item.item:focus   {
    width: 30vw;
	filter: inherit;
	z-index: 100;
	transform: translateZ(calc(var(--index) * 15))translateY(calc(var(--index) * -3));
    margin: 0.45vw;

}
.carousel {
    --_diameter: var(--carousel-diameter);
    --_radius: calc(var(--_diameter) / 2);
    --_item-width: var(--carousel-item-width);
    --_item-height: var(--carousel-item-height);
    perspective: var(--carousel-3d-perspective);
    perspective-origin: var(--carousel-3d-perspective-origin);
    width: var(--_diameter);
    height: var(--_diameter);
}

@media only screen and (max-width: 48rem) {
    .carousel {
            --_diameter: calc(var(--carousel-diameter) * 0.75);
            --_item-width: calc(var(--carousel-item-width) * 0.75);
            --_item-height: calc(var(--carousel-item-height) * 0.75);
    }
}

@media only screen and (max-width: 32rem) {
    .carousel {
            --_diameter: calc(var(--carousel-diameter) * 0.6);
            --_item-width: calc(var(--carousel-item-width) * 0.6);
            --_item-height: calc(var(--carousel-item-height) * 0.6);
    }
}

@media only screen and (max-width: 16rem) {
    .carousel {
            --_diameter: calc(var(--carousel-diameter) * 0.25);
            --_item-width: calc(var(--carousel-item-width) * 0.25);
            --_item-height: calc(var(--carousel-item-height) * 0.25);
    }
}

.carousel .carousel-control-button {
    --_width: var(--carousel-control-button-width);
    --_height: var(--carousel-control-button-height);
    z-index: 1;
    width: var(--_width);
    height: var(--_height);
    background-color: rgb(var(--carousel-control-color-rgb));
    opacity: 0.2;
    transition: opacity var(--carousel-transition-duration) var(--carousel-transition-ease);
    position: absolute;
}
.carousel .carousel-control-button:hover {
    opacity: 0.4;
}
.carousel .carousel-control-button:has(input:checked) {
    opacity: 0.8;
}

.carousel .carousel-control-button input {
    -webkit-appearance: none;
    appearance: none;
    opacity: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
}

.carousel .carousel-control-button.left {
    clip-path: polygon(0% 50%, 100% 0%, 100% 100%);
    top: calc(var(--_radius) - var(--_height) / 2);
    left: 0;
}
.carousel:has(.carousel-control-button.left input:checked) {
    --carousel-direction-animation-play-state: running;
}

.carousel .carousel-control-button.right {
    clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
    top: calc(var(--_radius) - var(--_height) / 2);
    right: 0;
}
.carousel:has(.carousel-control-button.right input:checked) {
    --carousel-direction-animation-play-state: paused;
}

.carousel .carousel-rotation-direction {
    --_direction-animation-play-state: var(--carousel-direction-animation-play-state);
    --_z: calc(var(--_radius) * -1);
    transform: translateZ(var(--_z));
    transform-style: preserve-3d;
    animation: carousel-rotation-reverse calc(var(--carousel-animation-duration) / 2) reverse linear infinite var(--_direction-animation-play-state);
    transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
}

@keyframes carousel-rotation-reverse {
    from {transform: translateZ(var(--_z)) rotateY(0deg);}
    to {transform: translateZ(var(--_z)) rotateY(360deg);}
}

@keyframes carousel-rotation-normal {
    from {transform: rotateY(0deg);}
    to {transform: rotateY(360deg);}
}

.carousel .carousel-item-wrapper {
    transform-style: inherit;
    width: inherit;
    height: inherit;
    list-style-type: none;
    position: relative;
    animation: carousel-rotation-normal var(--carousel-animation-duration) normal linear infinite var(--carousel-animation-play-state);
    transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
}

.carousel .carousel-rotation-direction:has(.carousel-item:hover) {
    --carousel-animation-play-state: paused;
    --_direction-animation-play-state: paused;
}

.carousel .carousel-item {
    --_width: var(--_item-width);
    --_height: var(--_item-height);
    --_rotation: calc(360 / var(--_num-elements) * var(--_index) * 1deg);
    left: calc(var(--_radius) - var(--_item-width) / 2);
    top: calc(var(--_radius) - var(--_item-height) / 2);
    transform: rotateY(var(--_rotation)) translateZ(var(--_radius));
    transform-style: inherit;
    width: var(--_width);
    height: var(--_height);
    transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
    box-shadow: 0 0 var(--carousel-item-glow-size) transparent;
    position: absolute;
}

.carousel .carousel-item:hover {
    box-shadow: 0 0 var(--carousel-item-glow-size) rgb(var(--carousel-item-glow-color-rgb));
    transform: rotateY(var(--_rotation)) translateZ(calc(var(--_radius) * var(--carousel-item-hover-effect)));
}

.carousel .carousel-item a {
    display: block;
    width: inherit;
    height: inherit;
    text-indent: -9999px;
    background-color: rgba(var(--carousel-item-empty-color-rgb), 0.5);
    background-image: var(--_image-url);
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    transition: filter var(--carousel-transition-duration) var(--carousel-transition-ease);
    filter: brightness(.5) sepia(1) saturate(400%) hue-rotate(90deg) brightness(0.6) contrast(80%);
    border-radius:10px;
}

.carousel .carousel-item:hover a {
    filter: grayscale(0%);
}

.carousel .carousel-item::before {
    content: '';
    width: inherit;
    height: inherit;
    background-color: rgba(var(--carousel-item-empty-color-rgb), 0.5);
    background-image: 
            linear-gradient(to top, rgba(60, 180, 90, 0.50) 0%, rgba(var(--carousel-bg-color-rgb), 1.0) 75%), 
            var(--_image-url);
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    pointer-events: none;
    filter: blur(var(--carousel-item-reflection-blur));
    transition: filter var(--carousel-transition-duration) var(--carousel-transition-ease);
    transform-style: inherit;
    transform-origin: center bottom;
    transform: rotateX(90deg) rotateZ(180deg) rotateY(180deg);
    position: absolute;
}

.carousel .carousel-item:hover::before {
    filter: blur(var(--carousel-item-reflection-blur)) grayscale(0%);
}

.carousel .carousel-ground {
    --_width: var(--_diameter);
    --_height: var(--_diameter);
    --_rotation: 90deg;
    left: calc(var(--_radius) - var(--_width) / 2);
    top: calc(var(--_radius) - var(--_height) / 2);
    transform: rotateX(var(--_rotation)) translateZ(calc(var(--_item-height) / -2));
    width: var(--_width);
    height: var(--_height);
    border-radius: 50%;
    background: radial-gradient(rgba(var(--carousel-shadow-color-rgb), 0.75) 15% , rgba(var(--carousel-bg-color-rgb), 0) 60%);
    opacity: 0.5;
    transition: opacity var(--carousel-transition-duration) var(--carousel-transition-ease);
    position: absolute;
}

.carousel .carousel-item-wrapper:has(.carousel-item:hover) .carousel-ground {
    opacity: 0.75;
}

