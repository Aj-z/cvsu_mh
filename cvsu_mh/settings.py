"""
Django settings for cvsu_mh project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret! 
# intentionally removed because its secret: :D

SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ['true', '1']

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')
# Application definition
ALLOWED_HOSTS = ['.appspot.com', 'cvsu-mh.onrender.com','127.0.0.1:8000', 'localhost', '127.0.0.1']
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'survey',
    'users',
    'cvsuquiz',
   'bootstrap5',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'djf_surveys',
]


SITE_ID = os.getenv('SITE_ID', 7)
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend', 
)

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'



SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE":[
            "profile",
            "email"
        ],
        "AUTH_PARAMS": {"access_type": "online"}
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    
]

ROOT_URLCONF = 'cvsu_mh.urls'
import os
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), 
                 os.path.join(BASE_DIR, 'users','templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'djf_surveys.context_processors.surveys_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'cvsu_mh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

import dj_database_url
#DATABASES = {
    #'default': dj_database_url.config(
     #   default=os.getenv('DATABASE_URL','postgresql://cvsu_mh_user:rKAgjxFGM11myFMKEt10yCHo44AKK0ZJ@dpg-cufph7l2ng1s73c7u4qg-a.singapore-postgres.render.com/cvsu_mh'),
      #  conn_max_age=600
    #)
# -for onrender-}
import environ
import os

import dj_database_url

DATABASES = {
    'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
}

#google > DATABASES = {
 #      'ENGINE': 'django.db.backends.postgresql_psycopg2',
  #      'NAME': os.getenv('DB_NAME'),
   #     'USER': os.getenv('DB_USER'),
    #    'PASSWORD': os.getenv('DB_PASSWORD'),
     #   'HOST': '35.198.227.136',  # Cloud SQL connection
      #  'PORT': '5432',
    #}
#}

# Initialize environment variables
env = environ.Env()
environ.Env.read_env()
#for google cloud 
#import os
#from google.cloud import secretmanager
#from django.core.exceptions import ImproperlyConfigured

# Function to fetch secrets from Google Cloud Secret Manager
#def get_secret(secret_name):
 #   client = secretmanager.SecretManagerServiceClient()
 #   project_id = os.getenv('GOOGLE_CLOUD_PROJECT')
 #   secret_path = f"projects/{project_id}/secrets/{secret_name}/versions/latest"
  #  try:
  #      response = client.access_secret_version(name=secret_path)
  #      return response.payload.data.decode("UTF-8")
  #  except Exception as e:
  #      raise ImproperlyConfigured(f"Could not retrieve secret {secret_name}: {e}")
    
#DB_NAME = get_secret('DB_NAME')
#DB_USER = get_secret('DB_USER')
#DB_PASSWORD = get_secret('DB_PASSWORD')   
#DB_HOST = get_secret('DB_HOST')
#DB_PORT = get_secret('DB_PORT')    

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.postgresql',
   #     'HOST': DB_HOST,
    #    'PORT': DB_PORT,
     #   'NAME': DB_NAME,
      #  'USER': DB_USER,
       # 'PASSWORD': DB_PASSWORD,
    #}
#}

# DATABASES = {
    # 'default': 
       #'ENGINE': 'django.db.backends.sqlite3', # django.db.backends.sqlite3 or  django.db.backends.postgresql 
        #'NAME': 'db.sqlite3',  # Database name from Render #mustchange this    



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# This production code might break development mode, so we check whether we're in DEBUG mode
if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type    
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
